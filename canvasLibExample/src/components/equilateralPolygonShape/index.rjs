import pencilFlow, { init } from '@ray-js/pencil-flow';
const { Stage, Group, Graphics, Rect, Circle, Bitmap, Text, EquilateralPolygon } = pencilFlow;

export default Render({
  renderCanvas(canvasId, hitCanvasId, pixelRatio) {
    init(canvasId, hitCanvasId, { pixelRatio }).then(({ stage }) => {
      const num = 6;
      const r = 50;
      const equilateralPolygon1 = new EquilateralPolygon(num, r, {
        gradientPoints: [
          { x: -r, y: r },
          { x: r, y: r },
        ],
        fillGradient: ['red', 'green', 'blue'],
        id: 'EquilateralPolygon',
      });
      equilateralPolygon1.alpha = 1;
      equilateralPolygon1.x = 150;
      equilateralPolygon1.y = 50;
      equilateralPolygon1.on('drag', function (event) {
        equilateralPolygon1.x += event.dx;
        equilateralPolygon1.y += event.dy;
        stage.update();
      });

      equilateralPolygon1.on('touchstart', function (event) {
        equilateralPolygon1.alpha = 0.5;
        stage.update();
      });
      equilateralPolygon1.on('touchend', function (event) {
        equilateralPolygon1.alpha = 1;
        stage.update();
      });

      const equilateralPolygon2 = new EquilateralPolygon(num, r, {
        fillStyle: 'blue',
        id: 'equilateralPolygon2',
      });
      equilateralPolygon2.alpha = 1;
      equilateralPolygon2.x = 150;
      equilateralPolygon2.y = 150;

      equilateralPolygon2.on('drag', function (event) {
        equilateralPolygon2.x += event.dx;
        equilateralPolygon2.y += event.dy;
        stage.update();
      });

      equilateralPolygon2.on('touchstart', function (event) {
        equilateralPolygon2.alpha = 0.5;
        stage.update();
      });
      equilateralPolygon2.on('touchend', function (event) {
        equilateralPolygon2.alpha = 1;
        stage.update();
      });

      const equilateralPolygon3 = new EquilateralPolygon(num, r, {
        gradientPoints: [
          { x: -r, y: r },
          { x: r, y: r },
        ],
        lineWidth: 3,
        strokeGradient: ['red', 'green', 'blue'],
        id: 'EquilateralPolygon3',
      });
      equilateralPolygon3.x = 50;
      equilateralPolygon3.y = 100;

      const group = new Group();

      group.x = 20;
      group.y = 20;
      // 测试是否可以重复添加成功
      group.add(equilateralPolygon1);
      group.add(equilateralPolygon1);
      group.add(equilateralPolygon1);
      group.add(equilateralPolygon1);
      group.add(equilateralPolygon1);

      group.add(equilateralPolygon2);
      group.add(equilateralPolygon3);

      stage.add(group);
      stage.update();
    });
  },
});
